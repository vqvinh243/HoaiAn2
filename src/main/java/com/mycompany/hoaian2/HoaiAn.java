/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.hoaian2;

import com.mycompany.models.Customer;
import com.mycompany.models.Order;
import com.mycompany.models.OrderItem;
import com.mycompany.models.Product;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 *
 * @author Jack243
 */
public class HoaiAn extends javax.swing.JFrame {
    /**
     * Creates new form HoaiAn
     */
    private Processor processor = new Processor();
    public HoaiAn() {
        initComponents();
        resultTbl.getColumnModel().getColumn(Column.STT.getIndex()).setMaxWidth(50);
        resultTbl.getColumnModel().getColumn(Column.TEN_SAN_PHAM.getIndex()).setMinWidth(120);
        summaryTbl.getColumnModel().getColumn(Column.STT.getIndex()).setMaxWidth(50);
        summaryTbl.getColumnModel().getColumn(Column.TEN_SAN_PHAM.getIndex()).setMinWidth(120);
        setLocationRelativeTo(null);
        setTitle("Chúc vợ yêu dấu làm việc vui vẻ!!!");
        initSelectProductListByFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        buyLevelCbx = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultTbl = new javax.swing.JTable();
        statusText = new javax.swing.JLabel();
        inputSelectorCbx = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        errorLbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productList = new javax.swing.JList<>();
        profitCbx = new javax.swing.JCheckBox();
        exportFileNameTxt = new javax.swing.JTextField();
        saleLevelCbx = new javax.swing.JComboBox<>();
        createTableBtn = new javax.swing.JButton();
        exportBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        summaryTbl = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        billList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fromDateTbx = new javax.swing.JTextField();
        toDateTbx = new javax.swing.JTextField();
        loadBillBtn = new javax.swing.JButton();
        exportSummaryBtn = new javax.swing.JButton();
        summaryFileName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        deleteOrderBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        buyLevelCbx.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        buyLevelCbx.setMaximumRowCount(20);
        buyLevelCbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mức nhập" }));
        buyLevelCbx.setToolTipText("");
        buyLevelCbx.setEnabled(false);
        buyLevelCbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyLevelCbxActionPerformed(evt);
            }
        });

        resultTbl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        resultTbl.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        resultTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Tên sản phẩm", "Đơn chính", "Lấy thêm L1", "Lấy thêm L2", "Tổng", "Đơn giá", "Thành tiền", "Lợi nhuận"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTbl.setRowHeight(20);
        resultTbl.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                resultTblPropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(resultTbl);

        statusText.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        statusText.setForeground(new java.awt.Color(51, 102, 255));

        inputSelectorCbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loại sản phẩm" }));
        inputSelectorCbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectProductListByFile(evt);
            }
        });

        jLabel2.setText("Tên file:");

        errorLbl.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        errorLbl.setForeground(new java.awt.Color(255, 0, 51));
        errorLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLbl.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Sản phẩm độc quyền của An Mocha");

        productList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(productList);

        profitCbx.setText("In lợi nhuận");
        profitCbx.setEnabled(false);

        exportFileNameTxt.setColumns(10);

        saleLevelCbx.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        saleLevelCbx.setMaximumRowCount(20);
        saleLevelCbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mức bán" }));
        saleLevelCbx.setToolTipText("");
        saleLevelCbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleLevelCbxActionPerformed(evt);
            }
        });

        createTableBtn.setText("Tạo bảng");
        createTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTableBtnActionPerformed(evt);
            }
        });

        exportBtn.setText("Xuất file");
        exportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(statusText, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(saleLevelCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buyLevelCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(inputSelectorCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(createTableBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportFileNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(profitCbx)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 749, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusText, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(inputSelectorCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saleLevelCbx)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buyLevelCbx)
                        .addComponent(createTableBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(errorLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(exportBtn)
                        .addComponent(exportFileNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(profitCbx)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        statusText.getAccessibleContext().setAccessibleName("statusLbl");

        mainTabbedPane.addTab("Nhập đơn", jPanel1);

        summaryTbl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        summaryTbl.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        summaryTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Tên sản phẩm", "Đơn chính", "Lấy thêm L1", "Lấy thêm L2", "Tổng", "Đơn giá", "Thành tiền", "Lợi nhuận"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        summaryTbl.setEnabled(false);
        summaryTbl.setRowHeight(20);
        summaryTbl.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                summaryTblPropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(summaryTbl);

        billList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        billList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                billListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(billList);

        jLabel4.setText("Từ");

        jLabel5.setText("đến:");

        fromDateTbx.setText("2018-01-01");

        toDateTbx.setText("2018-05-20");
        toDateTbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDateTbxActionPerformed(evt);
            }
        });

        loadBillBtn.setText("Xem đơn hàng");
        loadBillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBillBtnActionPerformed(evt);
            }
        });

        exportSummaryBtn.setText("Xuất file");
        exportSummaryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportSummaryBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Tên file:");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Sản phẩm độc quyền của An Mocha");

        jLabel1.setForeground(new java.awt.Color(0, 153, 0));
        jLabel1.setText("Vợ nhớ kết nối mạng khi sử dụng tính năng này nha!");

        deleteOrderBtn.setText("Xóa đơn");
        deleteOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOrderBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fromDateTbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toDateTbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(loadBillBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteOrderBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(summaryFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(exportSummaryBtn))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(fromDateTbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toDateTbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadBillBtn)
                    .addComponent(exportSummaryBtn)
                    .addComponent(summaryFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(deleteOrderBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );

        mainTabbedPane.addTab("Xem đơn", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1047, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane)
        );

        mainTabbedPane.getAccessibleContext().setAccessibleName("nhapdonTab");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    File selectedFile;
    String fileDirectoryPath;
    private void createTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTableBtnActionPerformed
        // TODO add your handling code here:
        errorLbl.setText("");
        fillProductToTable();
    }//GEN-LAST:event_createTableBtnActionPerformed

    

    private void fillProductToTable() {
        productToBuyPrice.clear();
        DefaultTableModel tableModel = (DefaultTableModel)resultTbl.getModel();
        if(!isValidLevel()) {
            return;
        } else {
            int rowCount = tableModel.getRowCount();
            for(int i = rowCount - 1; i >= 0; i--) {
                tableModel.removeRow(i);
            }
        }
        try {
            
            String saleLevel = String.valueOf(saleLevelCbx.getSelectedItem());
            String buyLevel = String.valueOf(buyLevelCbx.getSelectedItem());
            List<String> products = productList.getSelectedValuesList();
            int stt = 0;
            for(String productName : products) {
                stt++;
                tableModel.addRow(new Object[]{stt, productName, 0, 0, 0, 0, productToPrice.get(productName).get(saleLevel), 0, 0});
                productToBuyPrice.put(productName, productToPrice.get(productName).get(buyLevel));
            }
            tableModel.addRow(new Object[]{"", "TỔNG", 0, 0, 0, 0, "", 0, 0});
        } catch (Exception e) {
            errorLbl.setText("Ây da, phần mềm của chồng có lỗi rồi :(");
        }
        
    }
    
    private void resultTblPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_resultTblPropertyChange
        // TODO add your handling code here:
        updateTableValues(resultTbl);
    }//GEN-LAST:event_resultTblPropertyChange

    private void exportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnActionPerformed
        // TODO add your handling code here:
        errorLbl.setText("");
        try {
           if(exportFileNameTxt.getText().isEmpty()) {
               errorLbl.setText("Vợ yêu quên nhập tên file kìa :)");
           } else {
               exportFile(true);
           }
        } catch (Exception e) {
            errorLbl.setText("Oạch!!! Bị lỗi gì rồi vợ ơi, vợ làm lại thử xem...");
            Logger.getLogger(HoaiAn.class.getName()).log(Level.SEVERE, null, e);
        }
        
    }//GEN-LAST:event_exportBtnActionPerformed

    private void saleLevelCbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleLevelCbxActionPerformed
        // TODO add your handling code here:
        if(isValidLevel() && resultTbl.getRowCount() > 0) {
            updatePriceValueToTable(String.valueOf(saleLevelCbx.getSelectedItem()), true);
        }
    }//GEN-LAST:event_saleLevelCbxActionPerformed

    private void buyLevelCbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyLevelCbxActionPerformed
        // TODO add your handling code here:
        if(isValidLevel() && resultTbl.getRowCount() > 0) {
            updatePriceValueToTable(String.valueOf(buyLevelCbx.getSelectedItem()), false);
        }
    }//GEN-LAST:event_buyLevelCbxActionPerformed
    private Map<String, File> fileNameToFile = new HashMap<>();
    private void initSelectProductListByFile() {
        String userDir = System.getProperty("user.dir");
        String resourcesDir = userDir;
        try {
            Stream<Path> paths = Files.walk(Paths.get(userDir));
            resourcesDir = paths
                    .filter(f -> f.getFileName().toString().contains("resources"))
                    .findFirst().get().toString();
            paths = Files.walk(Paths.get(resourcesDir));
            paths.filter(Files::isRegularFile)
                    .forEach(f -> {
                        String fileName = f.getName(f.getNameCount() - 1).toString();
                        fileNameToFile.put(fileName.substring(0, fileName.lastIndexOf(".")), f.toFile());
                    });
        } catch (IOException e) {
            e.printStackTrace();
        }
        fileNameToFile.keySet().stream().forEach(name -> inputSelectorCbx.addItem(name));
    }

    private void selectProductListByFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectProductListByFile
        // TODO add your handling code here:
        FileInputStream fis;
        try {
            fis = new FileInputStream(fileNameToFile.get(inputSelectorCbx.getSelectedItem().toString()));
            readInputExcel(fis);
        } catch (Exception ex) {
            statusText.setText("Please choose again...");
            Logger.getLogger(HoaiAn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_selectProductListByFile

    private void summaryTblPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_summaryTblPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_summaryTblPropertyChange

    private void toDateTbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDateTbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toDateTbxActionPerformed
    private static Map<String, Order> nameToOrder = new HashMap<>();
    private void loadBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBillBtnActionPerformed
        reloadOrderList();
    }//GEN-LAST:event_loadBillBtnActionPerformed

    private void reloadOrderList() {
        List<Order> orders = processor.getOrdersByDateRange(fromDateTbx.getText(), toDateTbx.getText());
        nameToOrder.clear();
        orders.forEach(o -> nameToOrder.put(o.getName() + " (" + o.getCreatedDate() + ")", o));
        billList.setListData(nameToOrder.keySet().toArray(new String[nameToOrder.size()]));
    }

    private void billListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_billListValueChanged
        //clear table data
        DefaultTableModel model = (DefaultTableModel) summaryTbl.getModel();
        model.setRowCount(0);
        summaryTbl.revalidate();
        summaryFileName.setText("");
        if(!billList.isSelectionEmpty()) {
            //get selected orders
            List<Order> selectedOrders = new ArrayList<>();
            billList.getSelectedValuesList().forEach(name -> selectedOrders.add(nameToOrder.get(name)));
            Order order = processor.summarizeOrders(selectedOrders);
            updateOrderToTable(order);

            //update filename text field
            summaryFileName.setText(billList.getSelectedValue());
        }
    }//GEN-LAST:event_billListValueChanged

    private void exportSummaryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSummaryBtnActionPerformed
        // TODO add your handling code here:
        try {
            exportFile(false);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportSummaryBtnActionPerformed

    private void deleteOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOrderBtnActionPerformed
        if(!billList.isSelectionEmpty()) {
            int input = JOptionPane.showConfirmDialog(null,
                    "Vợ yêu có thực sự muốn xóa không?", "Select an Option...", JOptionPane.YES_NO_OPTION);
            if(input == 0) {
                List<Order> selectedOrders = new ArrayList<>();
                billList.getSelectedValuesList().forEach(name -> selectedOrders.add(nameToOrder.get(name)));
                processor.deleteOrders(selectedOrders);
                reloadOrderList();
            }
        }
    }//GEN-LAST:event_deleteOrderBtnActionPerformed

    private void updateOrderToTable(Order order) {
        DefaultTableModel tableModel = (DefaultTableModel)summaryTbl.getModel();
        int stt = 0;
        Integer quantity = 0;
        Integer price = 0;
        Integer profit = 0;
        for(OrderItem item : order.getItems()) {
            String productName = item.getProduct().getName();
            stt++;
            Integer sumQty = item.getQuantity() + item.getL1() + item.getL2();
            tableModel.addRow(new Object[]{stt, productName, item.getQuantity(), item.getL1(), item.getL2(), sumQty, item.getUnitPrice(), item.getPrice(), item.getProfit()});
            quantity += sumQty;
            price += item.getPrice();
            profit += item.getProfit();
        }

        tableModel.addRow(new Object[]{"", "TỔNG", quantity, 0, 0, quantity, "", price.toString(), profit});
    }

//    static boolean printProfit = false;
    private void updateTableValues(javax.swing.JTable jTable) {
        TableModel tableModel = jTable.getModel();
        int donchinhTotal = 0;
        int lan1Total = 0;
        int lan2Total = 0;
        int tongTotal = 0;
        int thanhtienTotal = 0;
        int loinhuanTotal = 0;
        for(int row = 0; row < tableModel.getRowCount(); row ++) {
            if(row < (tableModel.getRowCount() - 1)) {
                int donchinh = (Integer)tableModel.getValueAt(row, Column.DON_CHINH.getIndex());
                donchinhTotal += donchinh;
                int lan1 = (Integer)tableModel.getValueAt(row, Column.L1.getIndex());
                lan1Total += lan1;
                int lan2 = (Integer)tableModel.getValueAt(row, Column.L2.getIndex());
                lan2Total += lan2;
                int tong = donchinh + lan1 + lan2;
                tableModel.setValueAt(tong, row, Column.TONG.getIndex());
                tongTotal += tong;
                int dongia = (Integer)tableModel.getValueAt(row, Column.DON_GIA.getIndex());
                int thanhtien = tong * dongia;
                tableModel.setValueAt(thanhtien, row, Column.THANH_TIEN.getIndex());
                thanhtienTotal += thanhtien;
                int giaMua = productToBuyPrice.get(String.valueOf(tableModel.getValueAt(row, Column.TEN_SAN_PHAM.getIndex())));
                int loinhuan = thanhtien - (tong * giaMua);
                tableModel.setValueAt(loinhuan, row, Column.LOI_NHUAN.getIndex());
                loinhuanTotal += loinhuan;
            } else {
                tableModel.setValueAt(donchinhTotal, row, Column.DON_CHINH.getIndex());
                tableModel.setValueAt(lan1Total, row, Column.L1.getIndex());
                tableModel.setValueAt(lan2Total, row, Column.L2.getIndex());
                tableModel.setValueAt(tongTotal, row, Column.TONG.getIndex());
                tableModel.setValueAt(thanhtienTotal, row, Column.THANH_TIEN.getIndex());
                tableModel.setValueAt(loinhuanTotal, row, Column.LOI_NHUAN.getIndex());
            }
        }
    }

    private void updatePriceValueToTable(String level, boolean isSaleLevelChanged) {
        TableModel tableModel = resultTbl.getModel();
        if(!isSaleLevelChanged) {
            productToBuyPrice.clear();
        }
        for(int row = 0; row < tableModel.getRowCount(); row ++) {
            if(row < (tableModel.getRowCount() - 1)) {
                String productName = (String)tableModel.getValueAt(row, Column.TEN_SAN_PHAM.getIndex());
                if(isSaleLevelChanged) {
                    tableModel.setValueAt(productToPrice.get(productName).get(level), row, Column.DON_GIA.getIndex());
                } else {
                    productToBuyPrice.put(productName, productToPrice.get(productName).get(level));
                }

            }
        }
        updateTableValues(resultTbl);
    }

    
    private void readInputExcel(FileInputStream fis) throws IOException {
        while(saleLevelCbx.getItemCount()!= 1) {
            saleLevelCbx.removeItemAt(1);
            buyLevelCbx.removeItemAt(1);
        }
        indexToLevel = new HashMap<>();
        productToPrice = new LinkedHashMap<>();
        HSSFWorkbook wb = new HSSFWorkbook(fis);
        HSSFSheet sheet = wb.getSheetAt(0);
        Iterator<Row> rowIterator = sheet.iterator(); 
        while(rowIterator.hasNext()) {
            Row row = rowIterator.next();
            
            Iterator<Cell> cellIterator = row.cellIterator();
            String productName = null;
            Map<String, Integer> levelToPrice = new HashMap<>();
            while(cellIterator.hasNext()) {
                
                Cell cell = cellIterator.next();
                CellType cellType = cell.getCellTypeEnum();
                switch (cellType) {
                    case _NONE:
                        System.out.print("");
                        System.out.print("\t");
                        break;
                    case BOOLEAN:
                        System.out.print(cell.getBooleanCellValue());
                        System.out.print("\t");
                        break;
                    case BLANK:
                        System.out.print("");
                        System.out.print("\t");
                        break;
                    case FORMULA:

                        // Công thức
                        System.out.print(cell.getCellFormula());
                        System.out.print("\t");

                        FormulaEvaluator evaluator = wb.getCreationHelper().createFormulaEvaluator();

                        // In ra giá trị từ công thức
                        System.out.print(evaluator.evaluate(cell).getNumberValue());
                        break;
                    case NUMERIC:
                        System.out.print(Double.valueOf(cell.getNumericCellValue()).intValue());
                        System.out.print("\t");
                        if(row.getRowNum() == 0) {
                            indexToLevel.put(cell.getColumnIndex(), String.valueOf(Double.valueOf(cell.getNumericCellValue()).intValue()));
                        } else {
                            levelToPrice.put(indexToLevel.get(cell.getColumnIndex()), Double.valueOf(cell.getNumericCellValue()).intValue());
                        }
                        break;
                    case STRING:
                        System.out.print(cell.getStringCellValue());
                        System.out.print("\t");
                        if(row.getRowNum() == 0) {
                            indexToLevel.put(cell.getColumnIndex(), cell.getStringCellValue());
                        } else {
                            productName = cell.getStringCellValue();
                        }
                        break;
                    case ERROR:
                        System.out.print("!");
                        System.out.print("\t");
                        break;
               }
            }
            productToPrice.put(productName, levelToPrice);
             System.out.println("");
        }
       initGUI();
    }
    
    private static HSSFCellStyle createStyleForTitle(HSSFWorkbook workbook) {
        HSSFFont font = workbook.createFont();
        font.setBold(true);
        font.setFontName("Arial");
        font.setFontHeightInPoints((short)11);
        HSSFCellStyle style = workbook.createCellStyle();
        style.setFont(font);
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setFillForegroundColor(IndexedColors.CORNFLOWER_BLUE.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        return style;
    }
    
    private static HSSFCellStyle createStyleForNormalCell(HSSFWorkbook workbook) {
        HSSFFont font = workbook.createFont();
        font.setFontName("Arial");
        font.setFontHeightInPoints((short)11);
        HSSFCellStyle style = workbook.createCellStyle();
        style.setFont(font);
        style.setAlignment(HorizontalAlignment.CENTER);
        return style;
    }

    private static HSSFCellStyle createStyleForProductName(HSSFWorkbook workbook) {
        HSSFFont font = workbook.createFont();
        font.setFontName("Arial");
        font.setFontHeightInPoints((short)11);
        HSSFCellStyle style = workbook.createCellStyle();
        style.setFont(font);
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setFillForegroundColor(IndexedColors.TAN.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        return style;
    }

    private static HSSFCellStyle createStyleForSum(HSSFWorkbook workbook) {
        HSSFFont font = workbook.createFont();
        font.setFontName("Arial");
        font.setFontHeightInPoints((short)11);
        HSSFCellStyle style = workbook.createCellStyle();
        style.setFont(font);
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style.setBorderBottom(BorderStyle.THIN);
        style.setBorderTop(BorderStyle.THIN);
        style.setBorderLeft(BorderStyle.THIN);
        style.setBorderRight(BorderStyle.THIN);
        return style;
    }
    
    private void exportFile(boolean isInputOrderPage) throws FileNotFoundException, IOException {
        HSSFWorkbook workbook = new HSSFWorkbook();
        Order order = new Order();
        HSSFSheet sheet = workbook.createSheet("don hang");
        sheet.setColumnWidth(Column.STT.getIndex(), 1500);
        sheet.setColumnWidth(Column.TEN_SAN_PHAM.getIndex(), 4500);
        sheet.setColumnWidth(Column.DON_CHINH.getIndex(), 3500);
        sheet.setColumnWidth(Column.L1.getIndex(), 3500);
        sheet.setColumnWidth(Column.L2.getIndex(), 3500);
        sheet.setColumnWidth(Column.TONG.getIndex(), 3500);
        sheet.setColumnWidth(Column.DON_GIA.getIndex(), 3500);
        sheet.setColumnWidth(Column.THANH_TIEN.getIndex(), 3500);
        if(profitCbx.isSelected()) {
            sheet.setColumnWidth(Column.LOI_NHUAN.getIndex(), 3500);
        }

        int rownum = 0;
        Cell cell;
        Row row;
        //
        HSSFCellStyle titleStyle = createStyleForTitle(workbook);
        HSSFCellStyle normalCellStyle = createStyleForNormalCell(workbook);
        HSSFCellStyle productNameCellStyle = createStyleForProductName(workbook);
        HSSFCellStyle sumCellStyle = createStyleForSum(workbook);
 
        row = sheet.createRow(rownum);
 
        // STT
        cell = row.createCell(Column.STT.getIndex(), CellType.STRING);
        cell.setCellValue("");
        // Tên sản phẩm
        cell = row.createCell(Column.TEN_SAN_PHAM.getIndex(), CellType.STRING);
        cell.setCellValue(Column.TEN_SAN_PHAM.getName());
        cell.setCellStyle(titleStyle);
        // Đơn chính
        cell = row.createCell(Column.DON_CHINH.getIndex(), CellType.NUMERIC);
        cell.setCellValue(Column.DON_CHINH.getName());
        cell.setCellStyle(titleStyle);
        // Lấy thêm lần 1
        cell = row.createCell(Column.L1.getIndex(), CellType.NUMERIC);
        cell.setCellValue(Column.L1.getName());
        cell.setCellStyle(titleStyle);
        // Lấy thêm lần 2
        cell = row.createCell(Column.L2.getIndex(), CellType.NUMERIC);
        cell.setCellValue(Column.L2.getName());
        cell.setCellStyle(titleStyle);
        // Tổng
        cell = row.createCell(Column.TONG.getIndex(), CellType.NUMERIC);
        cell.setCellValue(Column.TONG.getName());
        cell.setCellStyle(titleStyle);
        // Đơn giá
        cell = row.createCell(Column.DON_GIA.getIndex(), CellType.STRING);
        cell.setCellValue(Column.DON_GIA.getName());
        cell.setCellStyle(titleStyle);
        // Thành tiền
        cell = row.createCell(Column.THANH_TIEN.getIndex(), CellType.NUMERIC);
        cell.setCellValue(Column.THANH_TIEN.getName());
        cell.setCellStyle(titleStyle);
        // Lợi nhuận
        cell = row.createCell(Column.LOI_NHUAN.getIndex(), CellType.NUMERIC);
        cell.setCellValue(Column.LOI_NHUAN.getName());
        cell.setCellStyle(titleStyle);

        // Data
        TableModel tableModel = isInputOrderPage ? resultTbl.getModel() : summaryTbl.getModel();
        List<OrderItem> items = new ArrayList<>();
        for(int i = 0; i < tableModel.getRowCount(); i ++) {
            boolean isEndOfTable = i == tableModel.getRowCount() - 1;
            rownum++;
            row = sheet.createRow(rownum);
 
            // STT
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue(String.valueOf(tableModel.getValueAt(i, Column.STT.getIndex())));
            cell.setCellStyle(normalCellStyle);
            // Tên sản phẩm
            cell = row.createCell(Column.TEN_SAN_PHAM.getIndex(), CellType.STRING);
            String tenSp = String.valueOf(tableModel.getValueAt(i, Column.TEN_SAN_PHAM.getIndex()));
            cell.setCellValue(tenSp);
            cell.setCellStyle(isEndOfTable ? normalCellStyle : productNameCellStyle);
            // Đơn chính
            cell = row.createCell(Column.DON_CHINH.getIndex(), CellType.NUMERIC);
            Integer quantity = (Integer)tableModel.getValueAt(i, Column.DON_CHINH.getIndex());
            cell.setCellValue((Integer)tableModel.getValueAt(i, Column.DON_CHINH.getIndex()));
            cell.setCellStyle(normalCellStyle);
            // Lấy thêm lần 1
            cell = row.createCell(Column.L1.getIndex(), CellType.NUMERIC);
            Integer l1 = (Integer)tableModel.getValueAt(i, Column.L1.getIndex());
            cell.setCellValue((Integer)tableModel.getValueAt(i, Column.L1.getIndex()));
            cell.setCellStyle(normalCellStyle);
            // Lấy thêm lần 2
            cell = row.createCell(Column.L2.getIndex(), CellType.NUMERIC);
            Integer l2 = (Integer)tableModel.getValueAt(i, Column.L2.getIndex());
            cell.setCellValue((Integer)tableModel.getValueAt(i, Column.L2.getIndex()));
            cell.setCellStyle(normalCellStyle);
            // Tổng
            cell = row.createCell(Column.TONG.getIndex(), CellType.NUMERIC);
            Integer sumQty = (Integer)tableModel.getValueAt(i, Column.TONG.getIndex());
            cell.setCellValue(quantity);
            cell.setCellStyle(isEndOfTable ? sumCellStyle : normalCellStyle);
            // Đơn giá
            cell = row.createCell(Column.DON_GIA.getIndex(), CellType.STRING);
            String unitPrice = String.valueOf(tableModel.getValueAt(i, Column.DON_GIA.getIndex()));
            cell.setCellValue(unitPrice);
            cell.setCellStyle(normalCellStyle);
            // Thành tiền
            cell = row.createCell(Column.THANH_TIEN.getIndex(), CellType.NUMERIC);
            Integer price = Integer.valueOf(tableModel.getValueAt(i, Column.THANH_TIEN.getIndex()).toString());
            cell.setCellValue(price);
            cell.setCellStyle(isEndOfTable ? sumCellStyle : normalCellStyle);
            // Lợi nhuận
            Integer profit = (Integer)tableModel.getValueAt(i, Column.LOI_NHUAN.getIndex());
            cell = row.createCell(Column.LOI_NHUAN.getIndex(), CellType.NUMERIC);
            cell.setCellValue(profit);
            cell.setCellStyle(isEndOfTable ? sumCellStyle : normalCellStyle);
            if(!isEndOfTable) {
                OrderItem item = new OrderItem();
                Product product = new Product();
                product.setName(tenSp);
                item.setProduct(product);
                item.setQuantity(quantity);
                item.setL1(l1);
                item.setL2(l2);
                item.setPrice(price);
                item.setUnitPrice(Integer.valueOf(unitPrice));
                item.setProfit(profit);
                items.add(item);
            }
        }
        String fileName = isInputOrderPage ? exportFileNameTxt.getText() : summaryFileName.getText();
        if(isInputOrderPage) {
            exportOrderToExcel(workbook, fileName + " (lợi nhuận)", true);
            exportOrderToExcel(workbook, fileName, false);
        } else {
            exportOrderToExcel(workbook, fileName, true);
        }
        errorLbl.setText("Vợ yêu tạo xong đơn hàng rồi nè!");

        //fill order data
        if(isInputOrderPage) {
            order.setName(fileName);
            order.setName(fileName);
            Customer customer = new Customer();
            customer.setId(1);
            order.setCustomer(customer);
            order.setCreatedDate(LocalDate.now());
            order.setItems(items);
            processor.insertBillRecord(order);
        }
    }

    private void exportOrderToExcel(HSSFWorkbook workbook, String fileName, boolean includedProfit) throws IOException {
        if(!includedProfit) {
            HSSFSheet sheet = workbook.getSheetAt(0);
            Iterator rowIter = sheet.iterator();
            while (rowIter.hasNext()) {
                HSSFRow row = (HSSFRow)rowIter.next();
                HSSFCell cell = row.getCell(Column.LOI_NHUAN.getIndex());
                row.removeCell(cell);
            }
        }
        String filePath = System.getProperty("user.dir");
        if(filePath.contains("/")) {
            filePath += "/";
        } else {
            filePath += "\\";
        }
        File file = new File( filePath + fileName +".xls");
        file.setWritable(true, false);
        file.getParentFile().mkdirs();
        FileOutputStream outFile = new FileOutputStream(file);

        workbook.write(outFile);
        outFile.close();

    }
    
    private void initGUI() {
         statusText.setText("Nhập file thành công!");
         System.out.println(indexToLevel.toString());
         productList.setListData(productToPrice.keySet().toArray(new String[productToPrice.size()]));
         for(String level : indexToLevel.values()) {
             saleLevelCbx.addItem(String.valueOf(level));
             buyLevelCbx.addItem(String.valueOf(level));
         }
    }
    
    private boolean isValidLevel() {
        if(saleLevelCbx.getSelectedIndex() == 0) {
           errorLbl.setText("Vợ chọn MỨC BÁN hàng cho SỈ đi kìa <3"); 
           clearBuyLevel();
           return false;
        }
        buyLevelCbx.setEnabled(true);
        if(buyLevelCbx.getSelectedIndex() == 0) {
            errorLbl.setText("Vợ chọn MỨC NHẬP hàng cho MÌNH đi kìa <3");
            return false;
        }
        return true;
    }

    private void clearBuyLevel() {
        buyLevelCbx.setEnabled(false);
        buyLevelCbx.setSelectedIndex(0);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HoaiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HoaiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HoaiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HoaiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HoaiAn().setVisible(true);
            }
        });
    }
    
    static Map<String, Integer> productToBuyPrice = new HashMap<>();
    static Map<Integer, String> indexToLevel = new HashMap<>();
    static Map<String, Map<String, Integer>> productToPrice = new HashMap<>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> billList;
    private javax.swing.JComboBox<String> buyLevelCbx;
    private javax.swing.JButton createTableBtn;
    private javax.swing.JButton deleteOrderBtn;
    private javax.swing.JLabel errorLbl;
    private javax.swing.JButton exportBtn;
    private javax.swing.JTextField exportFileNameTxt;
    private javax.swing.JButton exportSummaryBtn;
    private javax.swing.JTextField fromDateTbx;
    private javax.swing.JComboBox<String> inputSelectorCbx;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton loadBillBtn;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JList<String> productList;
    private javax.swing.JCheckBox profitCbx;
    private javax.swing.JTable resultTbl;
    private javax.swing.JComboBox<String> saleLevelCbx;
    private javax.swing.JLabel statusText;
    private javax.swing.JTextField summaryFileName;
    private javax.swing.JTable summaryTbl;
    private javax.swing.JTextField toDateTbx;
    // End of variables declaration//GEN-END:variables
}
