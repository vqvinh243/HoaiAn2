/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.hoaian2;

import java.awt.*;
import javax.swing.border.*;
import com.mycompany.models.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.awt.Color;
import java.awt.Font;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;

/**
 *
 * @author Jack243
 */
public class HoaiAn extends javax.swing.JFrame {
    /**
     * Creates new form HoaiAn
     */
    private static Controller controller;
    public HoaiAn() {
        initComponents();
        orderTbl.getColumnModel().getColumn(Column.STT.getIndex()).setMaxWidth(50);
        orderTbl.getColumnModel().getColumn(Column.TEN_SAN_PHAM.getIndex()).setMinWidth(120);
        summaryTbl.getColumnModel().getColumn(Column.STT.getIndex()).setMaxWidth(50);
        summaryTbl.getColumnModel().getColumn(Column.TEN_SAN_PHAM.getIndex()).setMinWidth(120);
        setLocationRelativeTo(null);
        setTitle("Chúc vợ yêu dấu làm việc vui vẻ!!!");
        initSelectProductListByFile();
        toDateTbx.setText(LocalDate.now().toString());
        loadBillBtn.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - Vo Quang Vinh
    private void initComponents() {
        mainTabbedPane = new JTabbedPane();
        jPanel1 = new JPanel();
        buyLevelCbx = new JComboBox<>();
        jScrollPane2 = new JScrollPane();
        orderTbl = new JTable();
        statusText = new JLabel();
        inputSelectorCbx = new JComboBox<>();
        jLabel2 = new JLabel();
        errorLbl = new JLabel();
        jLabel3 = new JLabel();
        jScrollPane1 = new JScrollPane();
        productList = new JList<>();
        exportFileNameTxt = new JTextField();
        saleLevelCbx = new JComboBox<>();
        createTableBtn = new JButton();
        exportBtn = new JButton();
        clearBtn = new JButton();
        jPanel2 = new JPanel();
        jScrollPane3 = new JScrollPane();
        summaryTbl = new JTable();
        jScrollPane4 = new JScrollPane();
        billList = new JList<>();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        fromDateTbx = new JTextField();
        toDateTbx = new JTextField();
        loadBillBtn = new JButton();
        exportSummaryBtn = new JButton();
        summaryFileName = new JTextField();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        jLabel1 = new JLabel();
        deleteOrderBtn = new JButton();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        Container contentPane = getContentPane();

        //======== mainTabbedPane ========
        {

            //======== jPanel1 ========
            {

                // JFormDesigner evaluation mark
                jPanel1.setBorder(new javax.swing.border.CompoundBorder(
                    new javax.swing.border.TitledBorder(new javax.swing.border.EmptyBorder(0, 0, 0, 0),
                        "JFormDesigner Evaluation", javax.swing.border.TitledBorder.CENTER,
                        javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Dialog", java.awt.Font.BOLD, 12),
                        java.awt.Color.red), jPanel1.getBorder())); jPanel1.addPropertyChangeListener(new java.beans.PropertyChangeListener(){public void propertyChange(java.beans.PropertyChangeEvent e){if("border".equals(e.getPropertyName()))throw new RuntimeException();}});


                //---- buyLevelCbx ----
                buyLevelCbx.setFont(new Font("Arial", Font.PLAIN, 11));
                buyLevelCbx.setMaximumRowCount(20);
                buyLevelCbx.setModel(new DefaultComboBoxModel<>(new String[] {
                    "M\u1ee9c nh\u1eadp"
                }));
                buyLevelCbx.setToolTipText("");
                buyLevelCbx.setEnabled(false);
                buyLevelCbx.addActionListener(e -> buyLevelCbxActionPerformed(e));

                //======== jScrollPane2 ========
                {

                    //---- orderTbl ----
                    orderTbl.setBorder(new EtchedBorder());
                    orderTbl.setFont(new Font("Arial", Font.PLAIN, 12));
                    orderTbl.setModel(new DefaultTableModel(
                        new Object[][] {
                        },
                        new String[] {
                            "", "T\u00ean s\u1ea3n ph\u1ea9m", "\u0110\u01a1n ch\u00ednh", "L\u1ea5y th\u00eam L1", "L\u1ea5y th\u00eam L2", "T\u1ed5ng", "\u0110\u01a1n gi\u00e1", "Th\u00e0nh ti\u1ec1n", "L\u1ee3i nhu\u1eadn"
                        }
                    ) {
                        Class<?>[] columnTypes = new Class<?>[] {
                            Integer.class, String.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class
                        };
                        boolean[] columnEditable = new boolean[] {
                            false, false, true, true, true, false, false, false, false
                        };
                        @Override
                        public Class<?> getColumnClass(int columnIndex) {
                            return columnTypes[columnIndex];
                        }
                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return columnEditable[columnIndex];
                        }
                    });
                    orderTbl.setRowHeight(20);
                    orderTbl.addPropertyChangeListener(e -> orderTblPropertyChange(e));
                    jScrollPane2.setViewportView(orderTbl);
                }

                //---- statusText ----
                statusText.setFont(new Font("Arial", Font.BOLD, 12));
                statusText.setForeground(new Color(51, 102, 255));

                //---- inputSelectorCbx ----
                inputSelectorCbx.setModel(new DefaultComboBoxModel<>(new String[] {
                    "Lo\u1ea1i s\u1ea3n ph\u1ea9m"
                }));
                inputSelectorCbx.addActionListener(e -> selectProductListByFile(e));

                //---- jLabel2 ----
                jLabel2.setText("T\u00ean file:");

                //---- errorLbl ----
                errorLbl.setFont(new Font("Arial", Font.PLAIN, 12));
                errorLbl.setForeground(new Color(255, 0, 51));
                errorLbl.setHorizontalAlignment(SwingConstants.CENTER);
                errorLbl.setToolTipText("");

                //---- jLabel3 ----
                jLabel3.setFont(new Font("Arial", Font.BOLD, 18));
                jLabel3.setForeground(new Color(51, 51, 255));
                jLabel3.setHorizontalAlignment(SwingConstants.CENTER);
                jLabel3.setText("S\u1ea3n ph\u1ea9m \u0111\u1ed9c quy\u1ec1n c\u1ee7a An Mocha");

                //======== jScrollPane1 ========
                {

                    //---- productList ----
                    productList.setFont(new Font("Arial", Font.PLAIN, 12));
                    productList.setModel(new AbstractListModel<String>() {
                        String[] values = {

                        };
                        @Override
                        public int getSize() { return values.length; }
                        @Override
                        public String getElementAt(int i) { return values[i]; }
                    });
                    jScrollPane1.setViewportView(productList);
                }

                //---- exportFileNameTxt ----
                exportFileNameTxt.setColumns(10);

                //---- saleLevelCbx ----
                saleLevelCbx.setFont(new Font("Arial", Font.PLAIN, 11));
                saleLevelCbx.setMaximumRowCount(20);
                saleLevelCbx.setModel(new DefaultComboBoxModel<>(new String[] {
                    "M\u1ee9c b\u00e1n"
                }));
                saleLevelCbx.setToolTipText("");
                saleLevelCbx.addActionListener(e -> saleLevelCbxActionPerformed(e));

                //---- createTableBtn ----
                createTableBtn.setText("T\u1ea1o b\u1ea3ng");
                createTableBtn.addActionListener(e -> createTableBtnActionPerformed(e));

                //---- exportBtn ----
                exportBtn.setText("Xu\u1ea5t file");
                exportBtn.addActionListener(e -> exportBtnActionPerformed(e));

                //---- clearBtn ----
                clearBtn.setText("Clear");
                clearBtn.addActionListener(e -> clearBtnActionPerformed(e));

                GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup()
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(saleLevelCbx, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buyLevelCbx, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(inputSelectorCbx, GroupLayout.PREFERRED_SIZE, 249, GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup()
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(errorLbl, GroupLayout.PREFERRED_SIZE, 221, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(statusText, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 373, GroupLayout.PREFERRED_SIZE)
                                    .addGap(54, 54, 54))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup()
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(createTableBtn)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(clearBtn)
                                            .addGap(130, 130, 130)
                                            .addComponent(jLabel2)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(exportFileNameTxt, GroupLayout.PREFERRED_SIZE, 255, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(exportBtn))
                                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 749, GroupLayout.PREFERRED_SIZE))
                                    .addGap(0, 0, Short.MAX_VALUE))))
                );
                jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup()
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel1Layout.createParallelGroup()
                                .addComponent(statusText, GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                                .addComponent(jLabel3, GroupLayout.Alignment.TRAILING)
                                .addComponent(inputSelectorCbx, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(errorLbl, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup()
                                .addComponent(saleLevelCbx)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(buyLevelCbx)
                                    .addComponent(createTableBtn, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(clearBtn))
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(exportBtn)
                                    .addComponent(exportFileNameTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup()
                                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                                .addComponent(jScrollPane1))
                            .addContainerGap())
                );
            }
            mainTabbedPane.addTab("Nh\u1eadp \u0111\u01a1n", jPanel1);

            //======== jPanel2 ========
            {

                //======== jScrollPane3 ========
                {

                    //---- summaryTbl ----
                    summaryTbl.setBorder(new EtchedBorder());
                    summaryTbl.setFont(new Font("Arial", Font.PLAIN, 12));
                    summaryTbl.setModel(new DefaultTableModel(
                        new Object[][] {
                        },
                        new String[] {
                            "", "T\u00ean s\u1ea3n ph\u1ea9m", "\u0110\u01a1n ch\u00ednh", "L\u1ea5y th\u00eam L1", "L\u1ea5y th\u00eam L2", "T\u1ed5ng", "\u0110\u01a1n gi\u00e1", "Th\u00e0nh ti\u1ec1n", "L\u1ee3i nhu\u1eadn"
                        }
                    ) {
                        Class<?>[] columnTypes = new Class<?>[] {
                            Integer.class, String.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class
                        };
                        boolean[] columnEditable = new boolean[] {
                            false, false, true, true, true, false, false, false, false
                        };
                        @Override
                        public Class<?> getColumnClass(int columnIndex) {
                            return columnTypes[columnIndex];
                        }
                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                            return columnEditable[columnIndex];
                        }
                    });
                    summaryTbl.setEnabled(false);
                    summaryTbl.setRowHeight(20);
                    summaryTbl.addPropertyChangeListener(e -> summaryTblPropertyChange(e));
                    jScrollPane3.setViewportView(summaryTbl);
                }

                //======== jScrollPane4 ========
                {

                    //---- billList ----
                    billList.setFont(new Font("Arial", Font.PLAIN, 12));
                    billList.setModel(new AbstractListModel<String>() {
                        String[] values = {

                        };
                        @Override
                        public int getSize() { return values.length; }
                        @Override
                        public String getElementAt(int i) { return values[i]; }
                    });
                    billList.addListSelectionListener(e -> billListValueChanged(e));
                    jScrollPane4.setViewportView(billList);
                }

                //---- jLabel4 ----
                jLabel4.setText("T\u1eeb");

                //---- jLabel5 ----
                jLabel5.setText("\u0111\u1ebfn:");

                //---- fromDateTbx ----
                fromDateTbx.setText("2018-01-01");

                //---- toDateTbx ----
                toDateTbx.setText("2018-05-20");
                toDateTbx.addActionListener(e -> toDateTbxActionPerformed(e));

                //---- loadBillBtn ----
                loadBillBtn.setText("Xem \u0111\u01a1n h\u00e0ng");
                loadBillBtn.addActionListener(e -> loadBillBtnActionPerformed(e));

                //---- exportSummaryBtn ----
                exportSummaryBtn.setText("Xu\u1ea5t file");
                exportSummaryBtn.addActionListener(e -> exportSummaryBtnActionPerformed(e));

                //---- jLabel6 ----
                jLabel6.setText("T\u00ean file:");

                //---- jLabel7 ----
                jLabel7.setFont(new Font("Arial", Font.BOLD, 18));
                jLabel7.setForeground(new Color(51, 51, 255));
                jLabel7.setHorizontalAlignment(SwingConstants.CENTER);
                jLabel7.setText("S\u1ea3n ph\u1ea9m \u0111\u1ed9c quy\u1ec1n c\u1ee7a An Mocha");

                //---- jLabel1 ----
                jLabel1.setForeground(new Color(0, 153, 0));
                jLabel1.setText("V\u1ee3 nh\u1edb k\u1ebft n\u1ed1i m\u1ea1ng khi s\u1eed d\u1ee5ng t\u00ednh n\u0103ng n\u00e0y nha!");

                //---- deleteOrderBtn ----
                deleteOrderBtn.setText("X\u00f3a \u0111\u01a1n");
                deleteOrderBtn.addActionListener(e -> deleteOrderBtnActionPerformed(e));

                GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
                jPanel2.setLayout(jPanel2Layout);
                jPanel2Layout.setHorizontalGroup(
                    jPanel2Layout.createParallelGroup()
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel2Layout.createParallelGroup()
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(fromDateTbx, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel5)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(toDateTbx, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup()
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(loadBillBtn)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(deleteOrderBtn)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel6)
                                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(summaryFileName, GroupLayout.PREFERRED_SIZE, 266, GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(exportSummaryBtn))
                                        .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 756, Short.MAX_VALUE))
                                    .addGap(16, 16, 16))
                                .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, GroupLayout.PREFERRED_SIZE, 373, GroupLayout.PREFERRED_SIZE)
                                    .addGap(59, 59, 59))))
                );
                jPanel2Layout.setVerticalGroup(
                    jPanel2Layout.createParallelGroup()
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(jLabel1))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(fromDateTbx, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(toDateTbx, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(loadBillBtn)
                                .addComponent(exportSummaryBtn)
                                .addComponent(summaryFileName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6)
                                .addComponent(deleteOrderBtn))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup()
                                .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                                .addComponent(jScrollPane4))
                            .addContainerGap())
                );
            }
            mainTabbedPane.addTab("Xem \u0111\u01a1n", jPanel2);
        }

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addComponent(mainTabbedPane, GroupLayout.DEFAULT_SIZE, 1047, Short.MAX_VALUE)
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addComponent(mainTabbedPane)
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents
    private void createTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTableBtnActionPerformed
        // TODO add your handling code here:
        errorLbl.setText("");
        updateProductToTable();
    }//GEN-LAST:event_createTableBtnActionPerformed

    private void resetOrderTable(boolean clearData) {
        exportFileNameTxt.setText("");
        productToBuyPrice.clear();
        Map<String, Integer> productToQuantity = new HashMap<>();
        DefaultTableModel tableModel = (DefaultTableModel) orderTbl.getModel();
        int rowCount = tableModel.getRowCount();
        for(int i = rowCount - 1; i >= 0; i--) {
            boolean isEndOfTable = i == tableModel.getRowCount() - 1;
            if(!isEndOfTable) {
                String tenSp = String.valueOf(tableModel.getValueAt(i, Column.TEN_SAN_PHAM.getIndex()));
                Integer quantity = (Integer)tableModel.getValueAt(i, Column.DON_CHINH.getIndex());
                productToQuantity.put(tenSp, quantity);
            }
            tableModel.removeRow(i);
        }
        try {
            String saleLevel = String.valueOf(saleLevelCbx.getSelectedItem());
            String buyLevel = String.valueOf(buyLevelCbx.getSelectedItem());
            List<String> products = productList.getSelectedValuesList();
            int stt = 0;
            for(String productName : products) {
                stt++;
                Integer previousQuantity = productToQuantity.get(productName) == null ? 0 : productToQuantity.get(productName);
                tableModel.addRow(new Object[]{stt, productName,  clearData ? 0 : previousQuantity, 0, 0, 0, productToPrice.get(productName).get(saleLevel), 0, 0});
                productToBuyPrice.put(productName, productToPrice.get(productName).get(buyLevel));
            }
            tableModel.addRow(new Object[]{"", "TỔNG", 0, 0, 0, 0, "", 0, 0});
        } catch (Exception e) {
            errorLbl.setText("Ây da, phần mềm của chồng có lỗi rồi :(");
        }
    }
    private void updateProductToTable() {
        if(isValidLevel()) {
            resetOrderTable(false);
        }
    }

    private void orderTblPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_orderTblPropertyChange
        // TODO add your handling code here:
        updateTableValues(orderTbl);
    }//GEN-LAST:event_orderTblPropertyChange

    private void exportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnActionPerformed
        // TODO add your handling code here:
        errorLbl.setText("");
        try {
           if(exportFileNameTxt.getText().isEmpty()) {
               errorLbl.setText("Vợ yêu quên nhập tên file kìa :)");
           } else {
               controller.exportFile(Page.ORDER, getFileNameByPage(Page.ORDER), getModelByPage(Page.ORDER));
               errorLbl.setText("Vợ yêu tạo xong đơn hàng rồi nè!");
           }
        } catch (Exception e) {
            errorLbl.setText("Oạch!!! Bị lỗi gì rồi vợ ơi, vợ làm lại thử xem...");
            Logger.getLogger(HoaiAn.class.getName()).log(Level.SEVERE, null, e);
        }

    }//GEN-LAST:event_exportBtnActionPerformed

    private void saleLevelCbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleLevelCbxActionPerformed
        // TODO add your handling code here:
        if(isValidLevel() && orderTbl.getRowCount() > 0) {
            updatePriceValueToTable(String.valueOf(saleLevelCbx.getSelectedItem()), true);
        }
    }//GEN-LAST:event_saleLevelCbxActionPerformed

    private void buyLevelCbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyLevelCbxActionPerformed
        // TODO add your handling code here:
        if(isValidLevel() && orderTbl.getRowCount() > 0) {
            updatePriceValueToTable(String.valueOf(buyLevelCbx.getSelectedItem()), false);
        }
    }//GEN-LAST:event_buyLevelCbxActionPerformed
    private Map<String, File> fileNameToFile = new HashMap<>();
    private void initSelectProductListByFile() {
        String userDir = System.getProperty("user.dir");
        String resourcesDir = userDir;
        try {
            Stream<Path> paths = Files.walk(Paths.get(userDir));
            resourcesDir = paths
                    .filter(f -> f.getFileName().toString().contains("resources"))
                    .findFirst().get().toString();
            paths = Files.walk(Paths.get(resourcesDir));
            paths.filter(Files::isRegularFile)
                    .forEach(f -> {
                        String fileName = f.getName(f.getNameCount() - 1).toString();
                        fileNameToFile.put(fileName.substring(0, fileName.lastIndexOf(".")), f.toFile());
                    });
        } catch (IOException e) {
            e.printStackTrace();
        }
        fileNameToFile.keySet().stream().forEach(name -> inputSelectorCbx.addItem(name));
    }

    private void selectProductListByFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectProductListByFile
        // TODO add your handling code here:
        FileInputStream fis;
        try {
            fis = new FileInputStream(fileNameToFile.get(inputSelectorCbx.getSelectedItem().toString()));
            readInputExcel(fis);
        } catch (Exception ex) {
            statusText.setText("Please choose again...");
            Logger.getLogger(HoaiAn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_selectProductListByFile

    private void summaryTblPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_summaryTblPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_summaryTblPropertyChange

    private void toDateTbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDateTbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toDateTbxActionPerformed
    private static Map<String, Order> nameToOrder = new HashMap<>();
    private void loadBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBillBtnActionPerformed
        reloadOrderList();
    }//GEN-LAST:event_loadBillBtnActionPerformed

    private void reloadOrderList() {
        List<Order> orders = controller.getProcessor().getOrdersByDateRange(fromDateTbx.getText(), toDateTbx.getText());
        nameToOrder.clear();
        orders.forEach(o -> nameToOrder.put(o.getName() + " (" + o.getCreatedDate() + ")", o));
        billList.setListData(nameToOrder.keySet().toArray(new String[nameToOrder.size()]));
    }

    private void billListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_billListValueChanged
        //clear table data
        DefaultTableModel model = (DefaultTableModel) summaryTbl.getModel();
        model.setRowCount(0);
        summaryTbl.revalidate();
        summaryFileName.setText("");
        if(!billList.isSelectionEmpty()) {
            //get selected orders
            List<Order> selectedOrders = new ArrayList<>();
            billList.getSelectedValuesList().forEach(name -> selectedOrders.add(nameToOrder.get(name)));
            Order order = controller.getProcessor().summarizeOrders(selectedOrders);
            updateOrderToTable(order, summaryTbl.getModel());

            //update filename text field
            summaryFileName.setText(billList.getSelectedValue());
        }
    }//GEN-LAST:event_billListValueChanged

    private void exportSummaryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportSummaryBtnActionPerformed
        // TODO add your handling code here:
        try {
            controller.exportFile(Page.SUMMARY, getFileNameByPage(Page.SUMMARY), getModelByPage(Page.SUMMARY));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_exportSummaryBtnActionPerformed

    private void deleteOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOrderBtnActionPerformed
        if(!billList.isSelectionEmpty()) {
            int input = JOptionPane.showConfirmDialog(null,
                    "Vợ yêu có thực sự muốn xóa không?", "Select an Option...", JOptionPane.YES_NO_OPTION);
            if(input == 0) {
                List<Order> selectedOrders = new ArrayList<>();
                billList.getSelectedValuesList().forEach(name -> selectedOrders.add(nameToOrder.get(name)));
                controller.getProcessor().deleteOrders(selectedOrders);
                reloadOrderList();
            }
        }
    }//GEN-LAST:event_deleteOrderBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        resetOrderTable(true);
    }//GEN-LAST:event_clearBtnActionPerformed

    private void updateOrderToTable(Order order, TableModel model) {
        DefaultTableModel tableModel = (DefaultTableModel)model;
        int stt = 0;
        Integer quantity = 0;
        Integer price = 0;
        Integer profit = 0;
        if(Objects.nonNull(order)) {
            for(OrderItem item : order.getItems()) {
                String productName = item.getProduct().getName();
                stt++;
                Integer sumQty = item.getQuantity() + item.getL1() + item.getL2();
                tableModel.addRow(new Object[]{stt, productName, item.getQuantity(), item.getL1(), item.getL2(), sumQty, item.getUnitPrice(), item.getPrice(), item.getProfit()});
                quantity += sumQty;
                price += item.getPrice();
                profit += item.getProfit();
            }
        }

        tableModel.addRow(new Object[]{"", "TỔNG", quantity, 0, 0, quantity, "", price.toString(), profit});
    }

    private void updateTableValues(javax.swing.JTable jTable) {
        TableModel tableModel = jTable.getModel();
        int donchinhTotal = 0;
        int lan1Total = 0;
        int lan2Total = 0;
        int tongTotal = 0;
        int thanhtienTotal = 0;
        int loinhuanTotal = 0;
        for(int row = 0; row < tableModel.getRowCount(); row ++) {
            if(row < (tableModel.getRowCount() - 1)) {
                int donchinh = (Integer)tableModel.getValueAt(row, Column.DON_CHINH.getIndex());
                donchinhTotal += donchinh;
                int lan1 = (Integer)tableModel.getValueAt(row, Column.L1.getIndex());
                lan1Total += lan1;
                int lan2 = (Integer)tableModel.getValueAt(row, Column.L2.getIndex());
                lan2Total += lan2;
                int tong = donchinh + lan1 + lan2;
                tableModel.setValueAt(tong, row, Column.TONG.getIndex());
                tongTotal += tong;
                int dongia = (Integer)tableModel.getValueAt(row, Column.DON_GIA.getIndex());
                int thanhtien = tong * dongia;
                tableModel.setValueAt(thanhtien, row, Column.THANH_TIEN.getIndex());
                thanhtienTotal += thanhtien;
                int giaMua = productToBuyPrice.get(String.valueOf(tableModel.getValueAt(row, Column.TEN_SAN_PHAM.getIndex())));
                int loinhuan = thanhtien - (tong * giaMua);
                tableModel.setValueAt(loinhuan, row, Column.LOI_NHUAN.getIndex());
                loinhuanTotal += loinhuan;
            } else {
                tableModel.setValueAt(donchinhTotal, row, Column.DON_CHINH.getIndex());
                tableModel.setValueAt(lan1Total, row, Column.L1.getIndex());
                tableModel.setValueAt(lan2Total, row, Column.L2.getIndex());
                tableModel.setValueAt(tongTotal, row, Column.TONG.getIndex());
                tableModel.setValueAt(thanhtienTotal, row, Column.THANH_TIEN.getIndex());
                tableModel.setValueAt(loinhuanTotal, row, Column.LOI_NHUAN.getIndex());
            }
        }
    }

    private void updatePriceValueToTable(String level, boolean isSaleLevelChanged) {
        TableModel tableModel = orderTbl.getModel();
        if(!isSaleLevelChanged) {
            productToBuyPrice.clear();
        }
        for(int row = 0; row < tableModel.getRowCount(); row ++) {
            if(row < (tableModel.getRowCount() - 1)) {
                String productName = (String)tableModel.getValueAt(row, Column.TEN_SAN_PHAM.getIndex());
                if(isSaleLevelChanged) {
                    tableModel.setValueAt(productToPrice.get(productName).get(level), row, Column.DON_GIA.getIndex());
                } else {
                    productToBuyPrice.put(productName, productToPrice.get(productName).get(level));
                }

            }
        }
        updateTableValues(orderTbl);
    }


    private void readInputExcel(FileInputStream fis) throws IOException {
        while(saleLevelCbx.getItemCount()!= 1) {
            saleLevelCbx.removeItemAt(1);
            buyLevelCbx.removeItemAt(1);
        }
        indexToLevel = new HashMap<>();
        productToPrice = new LinkedHashMap<>();
        HSSFWorkbook wb = new HSSFWorkbook(fis);
        HSSFSheet sheet = wb.getSheetAt(0);
        Iterator<Row> rowIterator = sheet.iterator();
        while(rowIterator.hasNext()) {
            Row row = rowIterator.next();

            Iterator<Cell> cellIterator = row.cellIterator();
            String productName = null;
            Map<String, Integer> levelToPrice = new HashMap<>();
            while(cellIterator.hasNext()) {

                Cell cell = cellIterator.next();
                CellType cellType = cell.getCellTypeEnum();
                switch (cellType) {
                    case _NONE:
                        System.out.print("");
                        System.out.print("\t");
                        break;
                    case BOOLEAN:
                        System.out.print(cell.getBooleanCellValue());
                        System.out.print("\t");
                        break;
                    case BLANK:
                        System.out.print("");
                        System.out.print("\t");
                        break;
                    case FORMULA:

                        // Công thức
                        System.out.print(cell.getCellFormula());
                        System.out.print("\t");

                        FormulaEvaluator evaluator = wb.getCreationHelper().createFormulaEvaluator();

                        // In ra giá trị từ công thức
                        System.out.print(evaluator.evaluate(cell).getNumberValue());
                        break;
                    case NUMERIC:
                        System.out.print(Double.valueOf(cell.getNumericCellValue()).intValue());
                        System.out.print("\t");
                        if(row.getRowNum() == 0) {
                            indexToLevel.put(cell.getColumnIndex(), String.valueOf(Double.valueOf(cell.getNumericCellValue()).intValue()));
                        } else {
                            levelToPrice.put(indexToLevel.get(cell.getColumnIndex()), Double.valueOf(cell.getNumericCellValue()).intValue());
                        }
                        break;
                    case STRING:
                        System.out.print(cell.getStringCellValue());
                        System.out.print("\t");
                        if(row.getRowNum() == 0) {
                            indexToLevel.put(cell.getColumnIndex(), cell.getStringCellValue());
                        } else {
                            productName = cell.getStringCellValue();
                        }
                        break;
                    case ERROR:
                        System.out.print("!");
                        System.out.print("\t");
                        break;
               }
            }
            productToPrice.put(productName, levelToPrice);
             System.out.println("");
        }
       initGUI();
    }

    public TableModel getModelByPage(Page page) {
        switch (page) {
            case SUMMARY: return summaryTbl.getModel();
            default: return orderTbl.getModel();
        }
    }

    public String getFileNameByPage(Page page) {
        switch (page) {
            case SUMMARY: summaryFileName.getText();
            default: exportFileNameTxt.getText();
        }
        return exportFileNameTxt.getText();
    }

    private void initGUI() {
         statusText.setText("Nhập file thành công!");
         System.out.println(indexToLevel.toString());
         productList.setListData(productToPrice.keySet().toArray(new String[productToPrice.size()]));
         for(String level : indexToLevel.values()) {
             saleLevelCbx.addItem(String.valueOf(level));
             buyLevelCbx.addItem(String.valueOf(level));
         }
    }

    private boolean isValidLevel() {
        if(saleLevelCbx.getSelectedIndex() == 0) {
           errorLbl.setText("Vợ chọn MỨC BÁN hàng cho SỈ đi kìa <3");
           clearBuyLevel();
           return false;
        }
        buyLevelCbx.setEnabled(true);
        if(buyLevelCbx.getSelectedIndex() == 0) {
            errorLbl.setText("Vợ chọn MỨC NHẬP hàng cho MÌNH đi kìa <3");
            return false;
        }
        return true;
    }

    private void clearBuyLevel() {
        buyLevelCbx.setEnabled(false);
        buyLevelCbx.setSelectedIndex(0);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HoaiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HoaiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HoaiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HoaiAn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        HoaiAn hoaiAn = new HoaiAn();
        hoaiAn.setVisible(true);
        hoaiAn.loadBillBtn.setEnabled(false);
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new HoaiAn().setVisible(true);
//            }
//        });
        controller = new Controller();
        hoaiAn.loadBillBtn.setEnabled(true);
    }

    static Map<String, Integer> productToBuyPrice = new HashMap<>();
    static Map<Integer, String> indexToLevel = new HashMap<>();
    static Map<String, Map<String, Integer>> productToPrice = new HashMap<>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - Vo Quang Vinh
    private JTabbedPane mainTabbedPane;
    private JPanel jPanel1;
    private JComboBox<String> buyLevelCbx;
    private JScrollPane jScrollPane2;
    private JTable orderTbl;
    private JLabel statusText;
    private JComboBox<String> inputSelectorCbx;
    private JLabel jLabel2;
    private JLabel errorLbl;
    private JLabel jLabel3;
    private JScrollPane jScrollPane1;
    private JList<String> productList;
    private JTextField exportFileNameTxt;
    private JComboBox<String> saleLevelCbx;
    private JButton createTableBtn;
    private JButton exportBtn;
    private JButton clearBtn;
    private JPanel jPanel2;
    private JScrollPane jScrollPane3;
    private JTable summaryTbl;
    private JScrollPane jScrollPane4;
    private JList<String> billList;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JTextField fromDateTbx;
    private JTextField toDateTbx;
    private JButton loadBillBtn;
    private JButton exportSummaryBtn;
    private JTextField summaryFileName;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel1;
    private JButton deleteOrderBtn;
    // End of variables declaration//GEN-END:variables
}
